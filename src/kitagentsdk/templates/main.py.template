# src/kitagentsdk/templates/main.py.template
from kitagentsdk import BaseAgent, run_agent
import time
import sys

class {{AGENT_NAME}}(BaseAgent):
    """
    Main training logic for the {{AGENT_NAME}}.
    """
    def train(self):
        """
        This method is called by the kitexec executor.
        """
        self.log(f"--- {{AGENT_NAME}} Training Run Initializing ---")

        # --- 1. Load Configuration ---
        # Access parameters from manifest.json via self.config
        try:
            total_steps = int(self.config.get("total_steps", 100))
            learning_rate = float(self.config.get("learning_rate", 0.01))
            self.log(f"Configuration loaded: total_steps={total_steps}, learning_rate={learning_rate}")
        except (ValueError, TypeError) as e:
            self.log(f"❌ Error: Invalid configuration parameters provided. {e}")
            sys.exit(1)

        # --- 2. Simulate Training Loop ---
        # In a real agent, this would be your model.learn() call.
        self.log("Starting simulated training loop...")
        for i in range(total_steps):
            # Report progress frequently for a responsive UI
            self.report_progress(i + 1)
            
            self.log(f"Step {i+1}/{total_steps}: Processing data...")
            
            # Record metrics periodically for visualization
            if (i + 1) % 10 == 0:
                pnl = (i + 1 - (total_steps / 2)) * 0.1 # Example metric
                self.record_metric("performance/pnl", i + 1, pnl)
            
            time.sleep(0.1)

        # --- 3. Save Artifacts ---
        # The platform expects a standardized 'model.zip' for stage transitions.
        try:
            model_artifact_path = self.output_path / "model.zip"
            with open(model_artifact_path, "w") as f:
                f.write(f"This is a dummy model trained for {total_steps} steps.")
            self.log(f"✅ Model artifact saved to: {model_artifact_path}")
        except IOError as e:
            self.log(f"❌ Error: Could not save artifact. {e}")
            sys.exit(1)

        self.log("--- ✅ {{AGENT_NAME}} Training Run Finished ---")

if __name__ == "__main__":
    # This allows the script to be run directly by the kitexec executor
    run_agent({{AGENT_NAME}})